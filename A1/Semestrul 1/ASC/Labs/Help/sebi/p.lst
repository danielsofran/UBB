     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, fclose, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 00                          descriptor db 0
    18 00000001 7200                        acces_mode db 'r', 0
    19 00000003 00000000                    sir dd 0
    20 00000007 6D61782E74787400            fisier db 'max.txt', 0
    21 0000000F 6E756D6172756C206D-         format db 'numarul maxim in baza 16 este:%x', 0
    21 00000018 6178696D20696E2062-
    21 00000021 617A61203136206573-
    21 0000002A 74653A257800       
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          
    27 00000000 68[01000000]                    push dword acces_mode
    28 00000005 68[07000000]                    push dword fisier
    29 0000000A FF15[00000000]                  call [fopen]
    30 00000010 83C408                          add esp, 4*2
    31                                          
    32 00000013 83F800                          cmp eax, 0
    33 00000016 7459                            je final
    34                                              
    35 00000018 A3[00000000]                    mov [descriptor], eax 
    36 0000001D BB00000000                      mov ebx, 0        
    37                                          ;citire
    38                                          citire:
    39 00000022 FF35[00000000]                      push dword [descriptor]
    40 00000028 6A01                                push dword 1
    41 0000002A 6A01                                push dword 1
    42 0000002C 68[03000000]                        push dword sir
    43 00000031 FF15[00000000]                      call [fread]
    44 00000037 83C410                              add esp, 4*4
    45                                              
    46 0000003A 83F800                              cmp eax, 0
    47 0000003D 7421                                je nu_mai_citesc
    48                                              
    49 0000003F 8B15[03000000]                      mov edx, dword[sir]
    50 00000045 833D[03000000]20                    cmp dword[sir], 32
    51 0000004C 7502                                jne cifra
    52 0000004E 7405                                je spatiu 
    53                                              cifra:
    54 00000050 83EA30                                  sub edx, 48
    55 00000053 EB03                                    jmp dupa
    56                                              spatiu:
    57 00000055 83EA20                                  sub edx, 32
    58                                              
    59                                              dupa:
    60                                              
    61                                              
    62                                              
    63 00000058 39D3                                cmp ebx, edx
    64 0000005A 7D02                                jge nu_update
    65 0000005C 89D3                                mov ebx, edx
    66                                              nu_update:
    67                                              
    68                                              
    69                                          
    70 0000005E EBC2                            jmp citire
    71                                          
    72                                          nu_mai_citesc:
    73 00000060 89D0                            mov eax, edx
    74 00000062 50                              push eax
    75 00000063 68[0F000000]                    push format
    76 00000068 FF15[00000000]                  call [printf]
    77 0000006E 83C408                          add esp, 4*2
    78                                          
    79                                          
    80                                          final:
    81 00000071 FF35[00000000]                  push dword [descriptor]
    82 00000077 FF15[00000000]                  call [fclose]
    83 0000007D 83C404                          add esp, 4
    84                                          
    85                                          
    86                                          
    87                                          
    88 00000080 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 00000082 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
