     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, printf, scanf, fopen, fclose, fprintf, fscanf
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                  
    14                                  %macro AFISARE 1
    15                                  pushad
    16                                  push %1
    17                                  push formatd
    18                                  call [printf]
    19                                  add esp, 4*2
    20                                  popad
    21                                  %endmacro
    22                                  
    23                                  %macro CITIRE 1
    24                                  pushad
    25                                  push %1
    26                                  push formatd
    27                                  call [scanf]
    28                                  add esp, 4*2
    29                                  popad
    30                                  %endmacro
    31                                  
    32                                  segment data use32 class=data
    33 00000000 00000000                    n dd 0
    34 00000004 <res 00000190>              v resd 100
    35 00000194 <res 00000065>              rez resb 101
    36 000001F9 256400                      formatd db "%d", 0
    37 000001FC 00000000                    sum dd 0
    38                                  
    39                                  segment code use32 class=code
    40                                      start:
    41                                          CITIRE n
    41 00000000 60                  <1> pushad
    41 00000001 68[00000000]        <1> push %1
    41 00000006 68[F9010000]        <1> push formatd
    41 0000000B FF15[00000000]      <1> call [scanf]
    41 00000011 83C408              <1> add esp, 4*2
    41 00000014 61                  <1> popad
    42 00000015 8B0D[00000000]                  mov ecx, [n]
    43 0000001B BF[04000000]                    mov edi, v
    44 00000020 FC                              cld
    45                                          citire:
    46                                              CITIRE EDI
    46 00000021 60                  <1> pushad
    46 00000022 57                  <1> push %1
    46 00000023 68[F9010000]        <1> push formatd
    46 00000028 FF15[00000000]      <1> call [scanf]
    46 0000002E 83C408              <1> add esp, 4*2
    46 00000031 61                  <1> popad
    47 00000032 83C704                              add edi, 4
    48 00000035 E2EA                            loop citire
    49                                          
    50 00000037 BE[04000000]                    mov esi, v
    51 0000003C BF[94010000]                    mov edi, rez
    52 00000041 8B0D[00000000]                  mov ecx, [n]
    53                                          bucla:
    54 00000047 AD                                  lodsd
    55 00000048 66BA0000                            mov dx, 0
    56 0000004C 66BB0A00                            mov bx, 10
    57 00000050 C705[FC010000]0000-                 mov dword[sum], 0
    57 00000058 0000               
    58                                              cifre:
    59 0000005A 66F7F3                                  div bx
    60 0000005D 66F7C20100                              test dx, 1
    61 00000062 7507                                    jnz next
    62 00000064 660115[FC010000]                        add word[sum], dx
    63                                                  next:
    64 0000006B 66BA0000                                mov dx, 0
    65 0000006F 6683F800                                cmp ax, 0
    66 00000073 7402                                    je continue
    67 00000075 EBE3                                    jmp cifre
    68                                              continue:
    69 00000077 A0[FC010000]                            mov al, [sum]
    70 0000007C AA                                      stosb
    71 0000007D E2C8                            loop bucla
    72                                          
    73 0000007F B800000000                      mov eax, 0
    74 00000084 8B0D[00000000]                  mov ecx, [n]
    75 0000008A BE[94010000]                    mov esi, rez
    76                                          _loop:
    77 0000008F AC                                  lodsb
    78                                              AFISARE eax
    78 00000090 60                  <1> pushad
    78 00000091 50                  <1> push %1
    78 00000092 68[F9010000]        <1> push formatd
    78 00000097 FF15[00000000]      <1> call [printf]
    78 0000009D 83C408              <1> add esp, 4*2
    78 000000A0 61                  <1> popad
    79 000000A1 E2EC                            loop _loop
    80 000000A3 6A00                            push    dword 0     
    81 000000A5 FF15[00000000]                  call    [exit]      
