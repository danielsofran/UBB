     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, printf, scanf, fopen, fclose, fprintf, fscanf
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                  
    14                                  
    15                                  segment data use32 class=data
    16 00000000 770000000000000000-         sir dq 1110111b, 1<<32, 0ABCD0002E7FCh
    16 00000009 00000001000000FCE7-
    16 00000012 0200CDAB0000       
    17                                      len equ ($-sir)/8
    18 00000018 <res 0000000C>              rez resd len
    19 00000024 00                          ct3 db 0
    20 00000025 00000000                    nr dd 0
    21 00000029 256300                      format db "%c", 0
    22 0000002C 00                          pus1 db 0
    23 0000002D 00                          rang db 0
    24 0000002E 30000000                    caract dd '0'
    25 00000032 00000000                    ctor dd 0
    26                                  
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 BE[00000000]                    mov esi, sir
    30 00000005 BF[18000000]                    mov edi, rez
    31 0000000A B903000000                      mov ecx, len
    32 0000000F FC                              cld
    33                                          dcv:
    34 00000010 AD                                  lodsd
    35 00000011 A3[25000000]                        mov [nr], eax
    36 00000016 C605[24000000]00                    mov byte[ct3], 0
    37 0000001D C605[2D000000]00                    mov byte[rang], 0
    38                                              .biti:
    39 00000024 D1E0                                    shl eax, 1
    40 00000026 7333                                    jnc reset
    41                                                  ; bit 1
    42 00000028 FE05[24000000]                          inc byte[ct3]
    43 0000002E 803D[24000000]03                        cmp byte[ct3], 3
    44 00000035 7CED                                    jl .biti
    45                                                  ; else ct3 = 3
    46 00000037 FE05[2D000000]                          inc byte[rang]
    47 0000003D C605[24000000]00                        mov byte[ct3], 0
    48 00000044 803D[2D000000]02                        cmp byte[rang], 2
    49 0000004B 7C0E                                    jl reset
    50                                                  ; stocam
    51 0000004D A1[25000000]                            mov eax, [nr]
    52 00000052 FF05[32000000]                          inc dword[ctor]
    53 00000058 AB                                      stosd
    54 00000059 EB0C                                    jmp gata
    55                                                  
    56                                                  reset:
    57 0000005B C605[24000000]00                        mov byte[ct3], 0
    58 00000062 83F800                                  cmp eax, 0
    59 00000065 75BD                                    jne dcv.biti
    60                                              gata:
    61 00000067 AD                                      lodsd
    62 00000068 E2A6                            loop dcv
    63                                          
    64 0000006A BE[18000000]                    mov esi, rez
    65 0000006F 8B0D[32000000]                  mov ecx, [ctor]
    66                                          afisare:
    67 00000075 AD                                  lodsd
    68 00000076 C605[2C000000]00                    mov byte[pus1], 0
    69 0000007D 51                                  push ecx
    70 0000007E B920000000                          mov ecx, 32
    71                                              .biti:
    72 00000083 D1C0                                    rol eax, 1
    73 00000085 7310                                    jnc b0
    74                                                  ; bit1
    75 00000087 C605[2C000000]01                        mov byte[pus1], 1
    76 0000008E 8315[2E000000]00                        adc dword[caract], 0
    77 00000095 EB09                                    jmp pt
    78                                                  b0: ; bitul 0
    79 00000097 803D[2C000000]00                        cmp byte[pus1], 0
    80 0000009E 7416                                    je continue1
    81                                                  pt:
    82 000000A0 60                                      pushad
    83 000000A1 FF35[2E000000]                          push dword[caract]
    84 000000A7 68[29000000]                            push format
    85 000000AC FF15[00000000]                          call [printf]
    86 000000B2 83C408                                  add esp, 4*2
    87 000000B5 61                                      popad
    88                                                  continue1:
    89 000000B6 C705[2E000000]3000-                     mov dword[caract], '0'
    89 000000BE 0000               
    90 000000C0 E2C1                                loop afisare.biti
    91                                              
    92 000000C2 59                                  pop ecx
    93 000000C3 60                                  pushad
    94 000000C4 6A20                                push ' '
    95 000000C6 68[29000000]                        push format
    96 000000CB FF15[00000000]                      call [printf]
    97 000000D1 83C408                              add esp, 4*2
    98 000000D4 61                                  popad
    99 000000D5 E29E                            loop afisare
   100 000000D7 6A00                            push    dword 0     
   101 000000D9 FF15[00000000]                  call    [exit]   
   102                                      ; start:
   103                                          ; push '0'
   104                                          ; push format
   105                                          ; call [printf]
   106                                          ; add esp, 4*2
